generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  country       String
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String
  accounts      Account[]
  sessions      Session[]
  rooms         Room[]
  messages      Message[]
  createdAt     DateTime  @default(now())

  // email token
  emailVerifyToken           String?
  emailVerifyTokenExpires    DateTime?
  emailVerifyTokenResendTime DateTime?

  // reset password
  passwordResetToken           String?
  passwordResetTokenExpires    DateTime?
  passwordResetTokenResendTime DateTime?
}

model Room {
  id        String    @id @default(cuid())
  users     User[]
  messages  Message[]
  type      RoomType  @default(INDIVIDUAL)
  createdAt DateTime  @default(now())
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id])
  roomId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  msg       Json?
}

enum RoomType {
  INDIVIDUAL
  GROUP
}
